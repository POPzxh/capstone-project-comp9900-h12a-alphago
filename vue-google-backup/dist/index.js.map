{"version":3,"file":"index.js","sources":["../src/GooglePlacesAutocomplete.vue","../src/index.js"],"sourcesContent":["<template>\n    <div>\n        <slot\n            name=\"input\"\n            :context=\"context\"\n            :actions=\"{ selectItemFromList, shiftResultsSelection, unshiftResultsSelection }\"\n            :events=\"{ inputHasReceivedFocus, inputHasChanged }\"\n        >\n            <input\n                type=\"search\"\n                v-model=\"context.input\"\n                @focus=\"inputHasReceivedFocus\"\n                @input=\"inputHasChanged\"\n                @keydown.enter.prevent=\"selectItemFromList\"\n                @keydown.down.prevent=\"shiftResultsSelection\"\n                @keydown.up.prevent=\"unshiftResultsSelection\"\n                class=\"vbga-input\"\n            >\n        </slot>\n        <ul v-if=\"hasResults\" class=\"vbga-results\">\n            <li\n                v-for=\"(result, index) in autocomplete.results\"\n                :class=\"{ highlighted: index === autocomplete.resultsHighlight }\"\n                :key=\"result.id\"\n                @click=\"resultHasBeenSelected(result)\"\n            >\n                <slot name=\"item\" :place=\"result\" v-if=\"index !== autocomplete.resultsHighlight\">\n                    {{ result.description }}\n                </slot>\n                <slot name=\"activeItem\" :place=\"result\" v-if=\"index === autocomplete.resultsHighlight\">\n                    {{ result.description }}\n                </slot>\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nexport default {\n\n    name: \"GooglePlacesAutocomplete\",\n\n    data() {\n        return {\n            autocomplete: {\n                service: null,\n                sessionToken: null,\n                results: [],\n                resultsHighlight: 0,\n                status: null,\n                selected: this.place,\n            },\n            context: {\n                input: this.value,\n                disableSearch: false,\n            },\n        }\n    },\n\n    props: {\n\n        bounds: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n\n        fields: {\n            type: Array,\n            required: false,\n            default: () => ([]),\n        },\n\n        value: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        place: {\n            type: Object,\n            required: false,\n            default: () => ({}),\n        },\n\n    },\n\n    computed: {\n\n        hasResults() {\n            return this.autocomplete.results.length > 0\n        },\n\n        searchValue() {\n            return this.context.input\n        },\n\n        resultField() {\n            return [\n                'formatted_address',\n                'geometry',\n                ...this.fields,\n            ]\n        }\n\n    },\n\n    watch: {\n\n        value: {\n            handler(value) {\n                if (!value) return\n\n                this.$set(this.context, 'input', value)\n            },\n            immediate: true,\n        },\n\n        place: {\n            handler(value) {\n                if (!value) return\n\n                this.$set(this.autocomplete, 'selected', value)\n            },\n            immediate: true,\n        },\n\n        searchValue(newValue, oldValue) {\n            if (newValue || !oldValue) return\n\n            this.$emit('resultCleared')\n        },\n\n    },\n\n    methods: {\n\n        initGoogleAutoCompleteService() {\n            this.$set(this.autocomplete, 'sessionToken', new window.google.maps.places.AutocompleteSessionToken())\n            this.$set(this.autocomplete, 'service', new window.google.maps.places.AutocompleteService())\n        },\n\n        selectItemFromList() {\n            const { results, resultsHighlight } = this.autocomplete\n            const { input } = this.context\n\n            if (!input && !results.length) {\n                return\n            }\n\n            if (input === this.value && !results.length) {\n                return this.returnLastSelection()\n            }\n\n            const { selected: place } = this.autocomplete\n\n            this.resultHasBeenSelected(results[resultsHighlight] || place)\n        },\n\n        shiftResultsSelection() {\n            const { results, resultsHighlight } = this.autocomplete\n            let newIndex = Math.min(results.length, resultsHighlight) + 1\n\n            if (newIndex >= results.length) newIndex = 0\n\n            this.$set(this.autocomplete, 'resultsHighlight', newIndex)\n        },\n\n        unshiftResultsSelection() {\n            const { results, resultsHighlight } = this.autocomplete\n            let newIndex = Math.min(results.length, resultsHighlight) - 1\n\n            if (newIndex < 0) newIndex = results.length - 1\n\n            this.$set(this.autocomplete, 'resultsHighlight', newIndex)\n        },\n\n        inputHasReceivedFocus() {\n            if (this.autocomplete.service) return\n\n            this.initGoogleAutoCompleteService()\n        },\n\n        inputHasChanged() {\n            const { service, sessionToken } = this.autocomplete\n            const { input } = this.context\n            const { bounds } = this\n\n            this.$set(this.autocomplete, 'resultsHighlight', 0)\n\n            if (!input) {\n                this.$set(this.autocomplete, 'selected', {})\n                this.$set(this.autocomplete, 'results', [])\n                return\n            }\n\n            service.getPlacePredictions({\n                input,\n                sessionToken,\n                bounds,\n            }, (predictions, status) => {\n                this.$set(this.autocomplete, 'status', status)\n\n                if (status !== window.google.maps.places.PlacesServiceStatus.OK) return\n\n                this.$set(this.autocomplete, 'results', predictions)\n            })\n        },\n\n        resultHasBeenSelected({ place_id: placeId, description }) {\n            const placeService = new window.google.maps.places.PlacesService(document.createElement('div'))\n\n            placeService.getDetails({\n                placeId,\n                fields: this.resultFields,\n            }, (place) => {\n                this.$set(this.autocomplete, 'selected', place)\n                this.$set(this.context, 'input', description)\n                this.$set(this.autocomplete, 'results', [])\n                this.$emit('resultChanged', place)\n            })\n        },\n\n        returnLastSelection() {\n            const { selected: place } = this.autocomplete\n\n            if (!place) return\n\n            this.$emit('resultChanged', place)\n        }\n\n    },\n\n}\n</script>\n","import GooglePlacesAutocomplete from './GooglePlacesAutocomplete.vue'\n\nconst GooglePlacesAutocompletePlugin = {\n    install(Vue) {\n        Vue.component(GooglePlacesAutocomplete)\n    }\n}\n\nexport default GooglePlacesAutocompletePlugin\nexport { GooglePlacesAutocomplete, GooglePlacesAutocompletePlugin }\n"],"names":["GooglePlacesAutocompletePlugin","install","Vue","component","GooglePlacesAutocomplete"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtCA,AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICAMA,8BAA8B,GAAG;EACnCC,OADmC,mBAC3BC,GAD2B,EACtB;IACTA,GAAG,CAACC,SAAJ,CAAcC,wBAAd;;CAFR;;;;;;"}